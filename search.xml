<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用git、github、码云]]></title>
    <url>%2Fusegit.html</url>
    <content type="text"><![CDATA[环境环境环境1.node.js2.git https://gitee.com/all-about-git3. GitHub+hexo+NEXT部署1. 配置Github&emsp;&emsp;注册github账号，建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】。 2. 配置SSH由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以必须要让github仓库认证你SSH key，在此之前，必须要生成SSH key。创建SSH Key。在windows下查看[c盘-&gt;用户-&gt;自己的用户名-&gt;.ssh]下是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。 1、首先需要检查你电脑是否已经有 SSH key运行 git Bash 客户端，输入如下代码： $ cd ~/.ssh$ ls这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。打开git bash，在控制台中输入以下命令。 1$ ssh-keygen -t rsa -C “youremail@example.com“密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。 同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。 输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘&gt;用户&gt;自己的用户名&gt;.ssh]目录下已经生成好了。 第2步：登录github。打开setting-&gt;SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中，再为当前的key起一个title来区分每个key。 https 和 SSH 的区别：1、https可以随意clone github上的项目，SSH则是你必须是你要克隆的项目的拥有者或管理员，所以要先添加 SSH key ，证明你是拥有者，否则无法克隆。 2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候则不需要密码，除非你配置SSH key的时候设置了密码，才需要输入密码的，否则是不需要输入密码的。 3、配置SSH-Key，网上有很多方法可供大家参考https://www.cnblogs.com/chuyanfenfei/p/8035067.html4.3 服务器上的 Git - 生成 SSH 钥3. 安装Hexo]]></content>
      <categories>
        <category>使用hexo搭建个人博客免费部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>github</tag>
        <tag>码云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript学习笔记]]></title>
    <url>%2Fjavascript.html</url>
    <content type="text"><![CDATA[js代码开头分号这个是防止报错的，因为我们的js代码结束都需要加一个;，其实不加也没有问题的，在做一些前端自动化时会对文件进行合并，也就是说可能会有另一个js文件加到你的文件前面。这样也不会有什么问题，因为有换行。如果再进行压缩就可能出事了，换行和空格都会被去掉。如果你前一个文件最后没有加; 它的内容就会下一个文件连到一起。就会造成方法错误。如果你在你的文件前面加一个;合并压缩时就相当时强制在你前面的一个文件最后加了一个;让他的结束掉就不会影响到你的文件了。就算他最后加了;加上你这个就会出现两;在一起，这样也不会报错。 立即调用函数表达式(function(){}())与(function(){})()IIFE通常的函数声明和调用分开的写法如下： function foo() {/…/} // 这是定义，Declaration；定义只是让解释器知道其存在，但是不会运行。 foo(); // 这是语句，Statement；解释器遇到语句是会运行它的。 普通的函数声明function foo(){}是不会执行的。这里如果直接这样写function foo(){}()解释器会报错的，因为是错误的语法。IIFE函数的调用方式通常是将函数表达式、它的调用操作符、分组操作符放到一个括号内，来告诉解释器这里有一个需要立即执行的函数。否则通常情况下，解析器遇到一个function关键字，都会把它当做是一个函数声明，而不是函数表达式。如下几种写法都是可以的： (function foo(){/…/}()); (function foo(){/…/})(); !function foo() {/…/}(); +function foo() {/…/}(); -function foo() {/…/}(); ~function foo() {/…/}(); 在需要表达式的场景下，就不需要用括号括起来了： void function(){/…/}(); var foo = function(){/…/}(); true &amp;&amp; function () { /…/ }(); 0, function () { /…/ }(); void声明了不需要返回值，第二个则将IIFE函数的返回值赋给了foo。第三、第四个都是明确需要表达式的场景，所以解析器会认识这种写法。 对于IIFE函数，也可以给它们传入参数，例如： (function foo(arg1,arg2,…){…}(param1,param2,…));1对于常见的(function($){…})(jQuery);即是将实参jQuery传入函数function($){}，通过形参$接收。上述函数中，最开始的那个括号，可能会由于js中自动分号插入机制而引发问题。例如： a = b + c;（function （） { // code}）（）; 如果没有第二行的分号，那么该处有可能被解析为c()而开始执行。所以有的时候，可能会看到这样的写法：;(function foo(){/…/}())，前边的分号可以认为是防御型分号。]]></content>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[deploypage]]></title>
    <url>%2Fdeploypage.html</url>
    <content type="text"><![CDATA[使用github免费部署静态网站默认git已安装，ssh已配置。 创建仓库新建仓库Repository，填写仓库的名字，勾选public和Initalize this repository with a README.并点击创建。 仓库创建好后点击setting然后下划找到github pages，选择master branch，然后点击save按钮保存。保存后出现的链接就是静态页面的预览地址，网页内容是默认的readme文件 网站上传先下载创建好的仓库到本地(open in desktop需要下载桌面版，建议使用这个)点击clone下载 然后复制自己项目的项目到仓库文件夹中，然后commit完成，接下来就可以通过链接访问网站了 注意&emsp;&emsp;默认将index.html页面当做初始界面，如果将index.html放入目录结构中，部署发布后，github会再自动生成一个index.html页面，会出现更新无效等情况。还有params.json会配置github给你生成的模板信息。]]></content>
      <categories>
        <category>在github上部署静态网站</category>
      </categories>
      <tags>
        <tag>github deploy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[google_debug]]></title>
    <url>%2Fgoogle-debug.html</url>
    <content type="text"><![CDATA[Google浏览器查看鼠标滑过的css&emsp;&emsp;网页的很多元素都添加有:hover,而这些元素的css只有鼠标悬浮时才能查看，当你鼠标移开元素想看他的css代码时，css也跟着恢复为:link状态，还有的是鼠标停留时class类名改变，当你移开鼠标想去选择类名查看时，类名又恢复了，这时应该怎么查看呢？ 很简单,点击选中代码左侧的三个小点，选择hover：如下图 右边同样可以设置，选中hover，如图： 然后就可以查看鼠标悬浮时的css样式了。]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>debug</tag>
        <tag>web调试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Bash使用]]></title>
    <url>%2Fgit.html</url>
    <content type="text"><![CDATA[Git 与 SVN 区别 SVN是集中式的版本控制系统，而Git是分布式版本控制系统。&emsp;&emsp;先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。&emsp;&emsp;分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。&emsp;&emsp;和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。 安装下载地址https://git-scm.com/download/win安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”,出现类似命令行的窗口，说明安装成功。安装完成后，还需要最后一步设置，在命令行输入：12$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com" 提示：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。 创建版本库什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。1.选择一个合适的地方，创建一个空目录123$ mkdir testgit$ cd testgit$ pwdpwd命令用于显示当前目录。2.通过命令 git init 把这个目录变成git可以管理的仓库为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。 git创建版本库时 没有在文件夹下自动生成.git文件夹这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。但是.git文件夹默认为隐藏属性，因此需要通过设置系统属性，才能看到这个文件夹：具体方法不同版本操作系统设置不一。我的是win10系统，将 ‘隐藏的项目’ 勾选就好了 添加文件到版本库&emsp;&emsp;首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真正使用版本控制系统，就要以纯文本方式编写文件。 在版本库testgit目录下新建一个记事本文件 test.txt 内容随意：11111111第一步，用命令git add告诉Git，把文件添加到仓库：1$ git add test.txt 没有任何提示，说明已经添加成功了。 第二步，用命令git commit告诉Git，把文件提交到仓库：1$ git commit -m "这是提交的注释说明" 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：123$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m "add 3 files." 千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。 相关文章 菜鸟教程 廖雪峰git教程 git使用详细教程]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web字体使用]]></title>
    <url>%2Ffont.html</url>
    <content type="text"><![CDATA[中文字体 web中文字体应用指南 摘要字体声明 同时声明中文字体的字体名称（英文）和显示名称（中文） 永远不要忘记声明英文字体，并且英文字体应该在中文字体之前 中文字体网页开发指南 英文字体字体笔记]]></content>
      <categories>
        <category>字体 font</category>
      </categories>
      <tags>
        <tag>字体</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序-食物营养成分查询的实现]]></title>
    <url>%2Fwxapp-food.html</url>
    <content type="text"><![CDATA[小程序页面开发 1.开始起步 （小程序官方文档） 申请账号&emsp;&emsp;点击 https://mp.weixin.qq.com/wxopen/waregister?action=step1 根据指引填写信息和提交相应的资料，就可以拥有自己的小程序帐号。登录 https://mp.weixin.qq.com ，我们可以在菜单 “设置”-“开发设置” 看到小程序的 AppID 了 。 安装开发工具 &emsp;&emsp;前往 开发者工具下载页面 ，根据自己的操作系统下载对应的安装包进行安装，有关开发者工具更详细的介绍可以查看 《开发者工具介绍》 。打开小程序开发者工具，用微信扫码登录开发者工具，就可以开始开发了。 代码构成微信小程序中就四种类型的文件 js ———— JavaScrip文件 json ——— 项目配置文件，负责窗口颜色等等 wxml ——– 类似HTML文件 wxss ——— 类似CSS文件 2.开发功能通过搜索食物名查询食物营养 框架框架图标 UI框架 ———— iView Weapp 图标 ——— 阿里图标图iconfont iViewiconfont到 GitHub 下载 iView Weapp 的代码，将 dist 目录拷贝到自己的项目中。 在微信小程序中使用阿里图标 ①下载图标 ②转换iconfont.ttf文件 小程序的wxss文件的font-face的url不接受http地址作为参数,但可以接受base64,因此需将字体文件下载后,转换为base64。用网址https://transfonter.org/转换 ③将文件放进微信小程序 复制iconfont.css中的代码，粘贴至小程序ivew 的dist目录中的icon的index.wxss dist/icon/index.wxss，这样就可以使用iview的方式使用阿里图标了 ④界面（wxml）中引用：&lt;i-icon class=&#39;wicon&#39; type=&quot;iconfont icon-nv&quot; size=&#39;24&#39; color=&quot;white&quot; /&gt; 项目结构项目主要分为首页(home)、搜索(search)、详情(entry)三个页面点击搜索按钮将home页面的input文本域的值跨页面传到search页面，在search判断搜索值是否为空，为空则弹出提示，不为空则直接搜索，并返回食物列表，然后点击进入食物营养成分的详情页面。 域名备案腾讯云申请云服务器和域名下载ssl证书教程 绑定域名在小程序后台的设置-开发设置中绑定备案的域名 然后在开发工具中上传代码，上传后就是开发版本，将开发版本提交审核通过后就发布了线上版本，在微信中就可以搜索到开发版的小程序了。 后台开发 1、配置apache]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery选择器]]></title>
    <url>%2Fselect.html</url>
    <content type="text"><![CDATA[jQuery 事件 - ready() 方法 在文档加载后激活函数： 定义和用法当 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会发生 ready 事件。 由于该事件在文档就绪后发生，因此把所有其他的 jQuery 事件和函数置于该事件中是非常好的做法。正如上面的例子中那样。 ready() 函数规定当 ready 事件发生时执行的代码。 ready() 函数仅能用于当前文档，因此无需选择器。 允许使用以下三种语法： 语法 1$(document).ready(function)语法 2$().ready(function)语法 3$(function)参数 描述function 必需。规定当文档加载后要运行的函数。提示和注释提示：ready() 函数不应与 一起使用。]]></content>
      <categories>
        <category>css js</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>js</tag>
        <tag>选择器</tag>
        <tag>过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客文章编写使用示例]]></title>
    <url>%2Fusehexo.html</url>
    <content type="text"><![CDATA[文章阅读更多&emsp;&emsp;文章缩略，只显示文章部分，点击阅读全文按钮阅读全篇文章。在文章适当的位置加入&lt;!--more--&gt;即可。 1&lt;!--more--&gt; note123&#123;% note danger %&#125; 用过的东西总是会忘记，还是记下来比较好 &#123;% endnote %&#125;&lt;div class="note default"&gt;&lt;p&gt;default default primary success info warning danger&lt;/p&gt;&lt;/div&gt;&#123;% label default@default %&#125; 用过的东西总是会忘记，还是记下来比较好 default default primary success info warning danger 引用12345&gt; 引用&lt;blockquote class="danger"&gt; 引用&lt;/blockquote&gt;&lt;blockquote class="default"&gt; 引用&lt;/blockquote&gt;&lt;blockquote class="blockquote-center"&gt;居中&lt;/blockquote&gt;&#123;% cq %&#125;居中&#123;% endcq %&#125; 引用 引用 引用 居中 居中 tab选项卡1234567891011&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**这是选项卡 1**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 2**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 3**&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 参考文章 选项卡 1选项卡 2选项卡 3这是选项卡 1 这是选项卡 2 这是选项卡 3 图标 支持 MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一件部署只需一条指令即可部署到 GitHub Pages，或其他网站。 丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。 铅笔 上传 下载 下载 下载变大 33% 下载两倍大 code1234&lt;span id="inline-toc"&gt;1.&lt;/span&gt;&lt;code class="language-html"&gt;code&lt;/code&gt;`code` 1. codecode 图片 1&lt;img src="/images/bg.png" /&gt; 1.在站点配置文件_config.yml中将post_asset_folder设置为true 即：1post_asset_folder:true 2.在hexo的目录下执行 1npm install https://github.com/CodeFalling/hexo-asset-image --save 3.安装完成&emsp;&emsp;完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。 4.插入图片最好通过相对路径标签引用资源，而不是markdown语法引用，有时后面两种方法引入图片会失败。123&#123;% asset_img pic04.jpg [测试成功] %&#125;![测试失败](/usehexo/pic04.jpg)&lt;img src="/usehexo/pic04.jpg" alt="测试失败" /&gt; tips:博客source路径下自建图片文件夹source\images(本篇文章开头第一张背景图就放在了自建文件夹里)next主题的图片文件夹themes\next\source\images两个图片文件夹的访问方式相同 ： /images/图片名/，将图片放在任一文件夹都可以。 音乐12345678910111213141516171819202122232425&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&amp;id=2321407097&amp;auto=1&amp;height=430"&gt;&lt;/iframe&gt;&#123;% aplayerlist %&#125;&#123; "autoplay": false, "showlrc": 3, "mutex": true, "music": [ &#123; "title": "PLANET", "author": "ラムジ", "url": "https://music.163.com/#/song?id=812400", "pic": "https://封面图.jpg", "lrc": "https://歌词.lrc" &#125;, &#123; "title": "起风了（Cover 高橋優", "author": "歌手名", "url": "https://music.163.com/#/song?id=461525011", "pic": "https://封面图.jpg", "lrc": "https://歌词.lrc" &#125; ]&#125;&#123;% endaplayerlist %&#125;]]></content>
      <categories>
        <category>hexo 博客编写常用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML文字文本美化效果]]></title>
    <url>%2Ftext.html</url>
    <content type="text"><![CDATA[text-stroke(文本描边)和text-fill-color(文本填充色) text-fill-color设置对象中的文字填充颜色text-stroke设置对象中的文字的描边厚度与颜色 text-fill-color检索或设置对象中的文字填充颜色,若同时设置text-fill-color和color，text-fill-color会覆盖color所定义的字体颜色； text-fill-color是css3的新属性，兼容性很差，只适用于webkit内核的浏览器有效果。 通过text-fill-color属性，可以做出一些例如渐变文字和镂空文字的效果。 镂空文字 未定义text-stroke-color的文字 12-webkit-text-fill-color:transparent;-webkit-text-stroke:1px #000; 未添加文字描边 1234567&lt;style&gt;.fill-text&#123; background-image:-webkit-linear-gradient(#eee,#000); -webkit-background-clip:text; -webkit-text-fill-color:transparent;&#125;&lt;/style&gt; 添加文字描边 1234background-image:-webkit-linear-gradient(#eee,#000);-webkit-background-clip:text;-webkit-text-fill-color:transparent;-webkit-text-stroke:1px transparent; text-stroke-color透明值让文字更柔和，对比你会发现添加文字描边更柔和一点 12345/*文字填充色为透明*/-webkit-text-fill-color:transparent;/* background-clip 规定背景的绘制区域 背景剪裁为文字，相当于用背景填充文字 CSS3新属性*/ background-clip:text;background-image:-webkit-linear-gradient(left,#3498db,#f47920 10%,#d71345 20%,#f7acbc 30%,#ffd400 40%,#3498db 50%,#f47920 60%,#d71345 70%,#f7acbc 80%,#ffd400 90%,#3498db); 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123;margin: 0;padding: 0;&#125; ._borderWrap&#123; width: 180px; height: 150px; position: absolute; left: 23%; top: 25%; &#125; ._border&#123; line-height: 145px; text-align: center; font-size: 40px; font-weight: bolder; -webkit-text-fill-color: transparent; background-image: -webkit-linear-gradient(left,#129835,#ece648 25%,#129835 50%,#F9E92B 75%,rgb(40, 150, 38)); background-size: 200%,100%; -webkit-background-clip: text; -webkit-animation: word 5s linear infinite ; &#125; @keyframes word &#123; 0%&#123;background-position: 0 0&#125; 100%&#123;background-position: -100% 0&#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="_borderWrap"&gt; &lt;div class="_border"&gt;你的名字&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; CSS文字描边属性text-stroke]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[location]]></title>
    <url>%2Flocation.html</url>
    <content type="text"><![CDATA[支持 MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一件部署只需一条指令即可部署到 GitHub Pages，或其他网站。 丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。 js隐藏与显示回到顶部按钮12345678window.onscroll = function () &#123; if (document.documentElement.scrollTop + document.body.scrollTop &gt; 100) &#123; document.getElementById("scrollto").style.display = "block"; &#125; else &#123; document.getElementById("scrollto").style.display = "none"; &#125; &#125;]]></content>
      <categories>
        <category>css定位</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css样式]]></title>
    <url>%2Fcssstyle.html</url>
    <content type="text"><![CDATA[蒙版遮罩123456789.mask &#123; position: fixed; z-index: 1; width: 100%; height: 100%; top: 0; left: 0; background: rgba(0, 0, 0, 0.6);&#125; 三横menu12345678910.icon-menu&#123; display: inline-block; width: 1.2rem; height: 0.1rem; padding: 0.3rem 0; border-top: 0.1rem solid white; border-bottom: 0.1rem solid white; background-color: white; background-clip: content-box;&#125; 监听input变化1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;div class="box"&gt; &lt;input type="text" placeholder="请输入您的用户名" class="user" value="admin"&gt; &lt;input type="password" placeholder="请输入您的密码" class="pass"&gt; &lt;input type="button" value="登录" class="btn"&gt;&lt;/div&gt;input &#123; width:320px; height:40px; outline:none; border:1px solid #DDDDDD; padding-left:12px; display:block; margin:20px auto 0 auto;&#125;.box &#123; width:500px; height:500px; margin:100px auto;&#125;.btn &#123; width:260px; height:40px; border-radius:5px;&#125;.orange &#123; background-color:orange!important; color:#fff!important;&#125;$(function() &#123; $("input").on("input propertychange", function() &#123; check("user", "pass", "btn", "orange"); &#125;); function check(user, pass, btn, name) &#123; var user = $("." + user).val(); var pass = $("." + pass).val(); if (user != "" &amp;&amp; pass != "") &#123; $("." + btn).addClass(name); &#125; else &#123; $("." + btn).removeClass(name); return false; &#125; &#125;&#125;); 1.oninput&amp;onchange：oninput和onchange都是事件对象，当输入框的值发生改变时触发该事件。不同的是，oninput是在值改变时立即触发，而onchange是在值改变后失去焦点才触发，并且可以用在非输入框中，如：select等。 2.propertychange：功能同oninput，用以替代oninput在IE9以下的不兼容性。 3.output:output是一个HTML5标签,IE系列浏览不兼容，主要用于计算输出。如：propertychange 和 input 事件: 1）propertychange只要当前对象的属性发生改变就会触发该事件 2）input是标准的浏览器事件，一般应用于input元素，当input的value发生变化就会发生，无论是键盘输入还是鼠标黏贴的改变都能及时监听到变化 123456789$(function()&#123; $('#username').bind('input propertychange', function() &#123; $('#result').html($(this).val().length + ' characters'); &#125;); &#125;) 这里bind同时绑定了input和propertychange两个方法。 同心圆 .icon-dot { display: inline-block; width: 10px; height: 10px; padding: 6px; border: 2px solid #6bd5e1; border-radius: 50%; background-clip: content-box; background-color: #6bd5e1; }]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>style</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进阶之路]]></title>
    <url>%2Fprogress.html</url>
    <content type="text"><![CDATA[一、认识前端 1.什么是前端 Web前端开发工程师是一个很新的职业，在国内乃至国际上真正开始受到重视的时间不超过10年。Web前端开发是从网页制作演变而来的，名称上有很明显的时代特征。在互联网的演化进程中，网页制作是Web 1.0时代的产物，那时网站的主要内容都是静态的，用户使用网站的行为也以浏览为主。 2005年以后，互联网进入Web 2.0时代，各种类似桌面软件的Web应用大量涌现，网站的前端由此发生了翻天覆地的变化。网页不再只是承载单一的文字和图片，各种丰富媒体让网页的内容更加生动，网页上软件化的交互形式为用户提供了更好的使用体验，这些都是基于前端技术实现的。 随着WEB2.0概念的普及和W3C组织的推广，网站重构的影响力正以惊人的速度增长。 其实中国的“web前端开发攻城狮”这个职位好多人并不知道是怎么叫出来的，那么我偷偷 &lt;(￣︶￣)&gt;告诉你：其实是淘宝团队，发明出来的本土化的名称，因为历史原因，淘宝在2005以后迅速崛起，并且爆发式的访问量，让淘宝网的用户体验受到巨大考验和急需前进。然后淘宝官方第一次有了【 web前端开发 】这个字眼和招聘职位，或许其他网站也想到了这样一种描述，但是毕竟知名度巨高的淘宝，受关注度自然高，口碑相传，就把【前端开发】这个叫法发扬光大了。在早期点Web前端不叫前端，而是被亲切的叫做“网页设计师”，没错你没看错，就是这个名字，我记得那时候 【网页三剑客】的说法满天飞，你掌握了这3贱客，真的很贱，就可以被人叫做网页设计师了。 网页三剑客：DW\FW\Falsh 网页三剑客（Flash、Dreamweaver、Firewoks) 并称为Macromedia的网页制作三剑客，由于是同一公司的产品，因而在功能上有着一个非常紧密的结合 。后来Firewoks被Adobe这个变态的巨头收购以后，ps就基本取代Firewoks来做设计网页的工作了，虽然我知道现在还有人用，估计是一种怀念和某些好用的切图功能吧。而那时候的网页设计师 如果要入此道，必须要掌握的就是Dreamweaver，并不是说只有他能写html 和 css ，而是它在当时的自动提示实在太好用、太强大了，简直不用费脑细胞，你就可以轻轻松松的完成你所想。在当时前端工具和编辑器贫乏的时代，这个绝对是神奇级别了（当然后来 写的多了都熟悉基本不用提示的）。当年还有很多基于Dreamweaver构建网站的教程，那时候真的是个基情满满的年代，这些工具类的历史产物，有兴趣的朋友可以去了解一下就好了，我们不在多舌。 2.web前端开发入门，需要掌握哪些基础 虽说这个问题很大，但是这个话题就很好回答了；因为现在前端如此眼花缭乱，技能多多，都是基于此三板斧：HTML、CSS、JavaScript HTML： 是构成网页展示的基础，是一种很简单可视化的标识语言，说白了就是 一是一，你写二就出二。网上所有的网页网站，不管多么牛鼻最后都会转化成html，被浏览器渲染出来，用作展示。CSS： 又称作样式表，简单点说就是html的外衣，将html包装的明艳动人。JavaScript：是一种直译式脚本语言，非常灵活，可以在任何浏览器上开发与调试的一种动态类型、弱类型、基于原型的语言。（关于js这个让人又爱又恨的语言，我们到后面会着重介绍和学习，因为掌握此技能， 你就拥有了全世界，说全世界是扯淡的，说白了拥有了 money和妹子） 3. web前端开发 ”到底有前途吗？如果你在2012年以前 这么问，或许很多人会思考一下，给你说不知道，应该没后端编程有前途吧，或者直接说，web前端有啥啊？不就写个网页、js吗？工资又低。。。。 随着html5的普罗天下，css3的风靡全球，随着nodejs 的崛起，JavaScript这个最容易被人误解的语言，终于散发了它本该有的光芒 由于现在是web应用时代，各种尺寸的电子设备，增长式的爆发，只要和屏幕有关的 就是颜值，颜值代表了一切，你说前端有前途吗？html5、网页游戏风靡全球，需要页面展现的东西 都是前端范畴，你说有前途吗？ 4.web前端的分类“ 入一行，要先知一行 ”；我们来看看web前端开发职位 无论什么门派都要做到的一些基本工作职责。 首先，你必须是一个合格的“页面仔”，这个叫法不好听，但很生动；我们都知道，所有呈现的内容都是基于HTML 网页的。如果你的html、css（包括现在的HTML5+CSS3）基础不会，或者不够扎实，都很难在有大的进步，或者你的JS 很好，但布局基础不行，还是不能算合格的web前端。 其次，前端主要负责实现视觉和交互功能，以及与后端服务器通信，完成业务逻辑。现在前端的核心价值在于对用户体验的极致追求。那么我们靠什么来提升用户体验和人性化操作，让用户觉得体验牛x、舒服呢？（当然细分厉害的公司，会有专门的 用户体验攻城狮）当然是我们自始自终的主角 JavaScript了，毕竟它最初就是为浏览器而生的脚本语言。 然而，JS这门语言并不是一种强类型语言，更像是一种解释型语言，所以很多属性，在不同的浏览器环境解释有很大不同导致，效果和性能千差万别，而且很多属性之长，之多，之巨都很有工作量。 之后，就出现了Jquery 这种的框架神器，由于其好用，简单，效果多样，兼容完美，高效率等特性，迅速席卷全世界，所以如果想入门，jquery 这个东西你是逃不掉的，而且利用它简单的语法，你会很快将一些效果实现出来，迅速提升兴趣。 再后，既然涉及到视觉 和用户体验，那么UI 设计知识，你肯定要涉及或者懂一些设计方面的技能和基本素养，比如PS的一些基本操作，切图，和颜色值（比如会改个字，隐藏个图层，改个尺寸，变个颜色什么滴），屏幕适配方案等，讲道理说：平时并不需要我们做，但技能包里绝对要有。 最后，服务器知识+后端语言基础，这个职责和话题就比较hight了，到后面我们会一一解释。 总之，web前端同样是程序员，由于前端是位于后端程序和界面设计师之间的岗位，相当于中间桥梁，要完成三者的对接，涉及到广泛 的知识，规模大到工程级，也就有了前端工程师的说法（某人总结，很是到位）。 根据web前端的细分工种 和 业务不同，我无耻的把她比拟出来几个门派，供大家参考，也让无比庞大的前端划分变得有趣一些，不然下面我放一张图， 你看了会晕菜。这里我先简单说几种，我们常常熟知的几个门派比如： 【少林派】：七十二般武艺样样精通 - web网站开发 【武当派】：以柔克刚 - 移动APP开发 【峨嵋派】：倾国倾城 - canvas 数据可视化 【华山派】：剑法精湛 - nodejs开发 【逍遥派】：潇洒飘逸 - HTML5游戏 让你晕菜的技能树 ，客观您感受一下先 二、学习前端1.基础HTML + CSS基础掌握HTML的标签使用、排版、CSS布局、样式美化和浏览器兼容性。HTML进阶、CSS进阶、div+css布局、HTML+css整站开发。 html + css 这部分建议在 w3school 在线教程 上学习，边学边练，每个属性后还有在线测试。 然后过一遍之后可以模仿一些网站做些页面。记住这个一定要多练 多练 多练 ，最重要的事儿 还得我说三遍？ 忍得住寂寞枯燥，才能拿得到高薪 Codeademy上的html&amp;css课程——在线交互式编程平台，弄清楚基本概念和基本语法w3school上的HTML/CSS教程——技术手册式的教程，比较全面，照着实例敲一遍 JavaScript的基础掌握js的基本语法、条件、语句和循环，并学习增强逻辑的常用算法。Js基础教程、js内置对象常用方法、常见DOM树操作大全、ECMAscript、DOM、BOM、定时器和焦点图。常见特效、例如：tab、导航、整页滚动、轮播图、JS制作幻灯片、弹出层、手风琴菜单、瀑布流布局、滚动事件、滚差视图。JS高级特征：正则表达式、排序算法、递归算法、闭包、函数节流、作用域链、基于距离运动框架、面向对象基础、 javascript 要学的内容实在很多，如果没有其他编程语言的基础的话，学起来可能要费些力，还是建议先在 w3school上学习一些基本语法 和定义。然后你必须要看书，然后实践（好多人问 有没有快速捷径，我只能告诉你：如果有捷径，码农们就不用天天如此苦逼了吧）。 JQuery：基础使用悬着器、DOM操作、特效和动画、方法链、拖拽、变形、JQueryUI组件基本使用。 2.响应式开发HTML5和移动Web开发HTML5HTML5新语义标签、HTML5表单、音频和视频、离线和本地存储、SVG、Web Socket、Canvas. CSS3:CSS3新选择器、伪元素、脸色表示法、边框、阴影、background系列属性改变、Transition、动画、景深和深透、3D效果制作、Velocity.js框架、元素进场、出场策略、炫酷CSS3网页制作。 Bootstrap:响应式概念、媒体查询、响应式网站制作、删格系统、删格系统原理、Bootstrap常用模板、LESS和SASS。 移动Web开发：它可以由JS在移动终端上基于jQuery移动/ Zepto框架。有了这两项主要技能，你就可以满足市场前端工程师的基本要求。根据市场反馈数据，工资一般在八千至一万三千澳元/月之间。跨终端WEB和主流设备简介、视口、流式布局、弹性盒子、rem、移动终端JavaScript事件、手机中常见JS效果制作、Zepto.js、手机聚划算页面、手机滚屏。 3.HTTP服务和AJAX编程WEB服务器基础：服务器基础知识、Apache服务器和其他WEB服务器介绍、Apache服务器搭建、HTTP介绍。 PHP基础：PHP基础语法、使用PHP处理简单的GET或者POST请求、 AJAX上篇：充分理解Ajax原理，掌握Ajax原生和jQuery的ajax用法。Ajax简介和异步的概念、Ajax框架的封装、XMLHttpRequest对象详细介绍方法、兼容性处理方法、Ajax框架的封装、Ajax中缓存问题、XML介绍和使用。 AJAX下篇：JSON和JSON解析、数据绑定和模板技术、JSONP、跨域技术、图片预读取和lazy-load技术、JQuery框架中的AjaxAPI、使用Ajax实现爆布流案例额。 4.框架的使用首先有一点，ES6是一定要去学习的，在Vue2.X，AngularJS2，React中都对ES6提供了原生的支持，以后很多新的特性肯定也会使用ES6的语法去编写。 Web开发工作流：GIT/SVN、Yeoman脚手架、NPM/Bower依赖管理工具、Grunt/Gulp/Webpack。 MVC/MVVM/MVW框架：Angular.js、Backbone.js、Knockout/Ember。 常用库：React.js、Vue.js、Zepto.js。 AngularJS AngularJS在由AngularJS1升级到AngularJS2以后，完全是一个新的东西，原来在AngularJS1中的controller，service，filter等内容在AngularJS2中都变成一个个的module，component。 所以如果还没学过AngularJS部分内容的同学可以直接选择学习AngularJS2。但是需要注意的是AngularJS2是以Typescript语言编写的，所以对Typescript的学习就必不可少了。 Vue 个人认为Vue学习是相对来说成本比较低的框架，目前官方文档已经很详细，关于Vue全家桶的内容像Vue-resource，Vue-router，Vuex等越来越完善，而且在Github上开源是项目也有很多，可以很容易掌握。感兴趣的可以关注下我自己用Vue开发的一个简书网站。 React React采用了Virtual DOM这一个很独特的概念，提高了页面渲染的效率。但是也是由于Virtual DOM的存在，在编程方式上，React和Vue,AngularJS稍有不同，如果习惯了Vue开发，可能还不太习惯React的开发。 在针对框架层面，在学习之后，应该能回答下面这些问题。 AngularJS和Vue的双向数据绑定的实现 Vuex工作机制 React的Virtual DOM基本实现，如何自己实现一个Virtual DOM算法 5.HTML5原生移动应用开发Cordova：WebApp/NativeApp/HybirdApp简介、Cordova简介、与PhoneGap之间的关系、开发环境搭建、Cordova实战（创建项目，配置，编译，调试，部署发布）。 Ionic：Ionic简介和同类对比、模板项目解析、常见组件及使用、结合Angular构建APP、常见效果（下拉刷新，上拉加载，侧滑导航，选项卡）。 React Native：React Native简介、React Native环境配置、创建项目，配置，编译，调试，部署发布、原生模块和UI组件、原生常用API。 HTML5+：HTML5+中国产业联盟、HTML5 Plus Runtime环境、HBuilder开发工具、MUI框架、H5+开发和部署。 6.模块化&amp;组件化前端开发已经从原来的整体化开发发展到现在的模块化开发，甚至是组件化开发，开发过程愈发精细，讲求的是代码的可复用性。以前一个页面从上到下一次编写的过程，现在已经发展为先将页面进行拆分成模块甚至是组件，不同的人关注不同的模块，组件，提高开发效率。在模块化开发中，不得不提到CommonJS，AMD和CMD规范，并且有不同的实现，比如RequireJS。对于模块化编程的规范已经有很多的文章有讲到，可以认真去学习下。iview、zanui等框架都是组件化开发，开发时直接使用其组件即可。 7.构建工具前端开发是离不开构建工具的，自己写的代码如何打包压缩，ES6的代码如何编译成JS，Sass，less代码如何编译成原生CSS，这些都是构建工具去完成的。有了构建工具，可以极大的提高我们的开发速度，这里不得不提到的就是gulp+webpack。 gulp是一种任务驱动型的构建工具，通过管道处理数据流，提高了数据处理速度，而且其提供的一系列插件也很方便使用。 而webpack的作用就是把所有浏览器端需要发布的静态资源做相应的准备，比如资源的解析、合并和打包，它提供了强大的加载器和插件机制，例如vue-loader提供了对vue的支持，babel-loader提供了对ES6的支持。 其他的构架工具还有工程化构建的Yeoman，Slush，FIS等。 8. Node.js全栈开发前端开发到最后就是要走全栈开发的道路了，全栈开发以NodeJS作为服务端语言，基于NodeJS实现的服务端框架有Express，KOA，目前也发展的越来越成熟。 既然讲到全栈开发，肯定会通过服务端语言操纵数据库，因此对于数据库的知识也肯定要掌握的。 快速入门Node.js发展、生态圈、Io.js、Linux/Windows/OS X环境配置、REPL环境和控制台程序、异步编程，非阻塞I/O、模块概念，模块管理工具、开发流程，调试，测试。 核心模块和对象：全局对象global，process，console，util、事件驱动，事件发射器、加密解密，路径操作，序列化和反序列化、文件流操作、HTTP服务端与客户端、Socket.IO。 Web开发基础：HTTP协议，请求响应处理过程、关系型数据库操作和数据访问、非关系型数据库操作和数据访问、原生的Node.js开发Web应用程序、Web开发工作流、Node.js开发Blog案例。 快速开发框架：Express简介+MVC简介、Express常用API、Express路由模块、Jade/Ejs模板引擎、使用Express重构Blog案例、Koa等其他常见MVC框架。 以下内容都是经过我自己本身的学习路线经验，还有网络各路大神共同整理的资料 汇总，帮助源源不断入坑的新人更好的学习。 前端书籍必读、必买（本帅认为）★★ 越多，推荐等级越高，和难度无关。最好按照我给的顺序入门，这样不会让你枯燥，想放弃，如果先推荐经典的厚的，满篇定义，我估计是害你们放弃。 【JavaScript】 先说 JavaScript,因为前面说了，css最好跟着视频练习，毕竟都是可视化的，像做艺术。 【第一本】《JavaScript DOM编程艺术》★★★★★ 最好的JS入门书籍，最让人有兴趣读完的那种书。它通过一个 幻灯片 案例，从头到尾教你实现出来，最后效果实现的同时，基本的JS常用属性，你也就滚瓜烂熟了，很有成就感。（个人很偏向这种风格书籍，此书让我彻底爱上前端js）一目了然地告诉你如何用JS操作DOM（这是浏览器端编程的基本功），还灌输了最符合标准的编程理念。可惜有点老，最新一版是2010年的。不过不影响阅读和实现，全部按照最新ES5属性就行了。 【第二本】《JavaScript高级程序设计》 ★★★★ 又称红宝书，（我喜欢叫 望眼镜）雅虎首席前端架构师，YUI的作者Zakas出品。虽然书名带了“高级”二字，但是讲得都很基础的属性内容，事无巨细。关键一点是翻译的也很到位，并不是如嚼蜡一般，这很重要。看此书，我建议配着下面的犀牛书一起 看效果更佳。 【第三本】《JavaScript权威指南》 ★★★★★ 著名的淘宝前端团队翻译的，看译者列表都是一堆前期大神。1这本书又叫犀牛书，被国人誉为：javascript开发者的圣经。网上对此书评价很多很好，大概意思是说这 本书是一本JavaScript文档手册，更适合当作字典和备忘录查询来使用。我也是对这本书有很厚的感情和依赖（忘了属性就拿来翻翻，总有收获），个人感觉这本书还是写得枯燥了些，毕竟是工具性质，不适合当作第一本入门来看，不过内容绝对是五颗星，无可挑剔！神书 【第四本】《JavaScript语言精粹》 ★★★★★ 作者是大名鼎鼎的 【老道】，我的JS 偶像，我github第一个关注的就是这个大胡子叔叔。他是 JSON格式的发明和维护者，也有很多著作和对JS 这门语言的超多贡献，可见此人功力绝对顶级！这本书，属于稍微入门以后看的，了解了一些中高级概念 比如：闭包、原型链、作用域链、继承封装等以后，看此书有如神助，看一页相当于犀牛书几十页的讲解（不吹牛逼，当时我是这感觉的） 【CSS】类， 如果视频看完了，练习的熟练了，你还需要一些书的推荐和查询，也是有必要的，我再来给你罗列几本经典的收藏书，买不买均可的。 【第一本】《Head first HTML&amp;CSS》 ★★★ 好的入门书。看两遍就对HTML &amp; CSS 有个大概印象了。此时把w3cschool作为备查手册收藏起来，结合此书，事半功倍，成就感爆棚。 【第二本】《CSS权威指南（第三版）》 ★★★★ 最权威的CSS书籍，除了阅读W3C的文档外的不二选择（就是翻译太操蛋，可能有的词你以为是火星语，不过不影响阅读）。有时间可以反复看，有css3内容，并当做字典随时查。类似犀牛书 【第三本】《图解CSS3：核心技术与案例实践》 ★★★ 这本书讲解的是最新的CSS3（前几本书停留在CSS2.1时代，2.1是基础），CSS3也是必学的，不然真的跟不上时代了。 【第四本】《CSS禅意花园》 ★★★★ 这里写图片描述这本书很值得期待，我看过PDF版本的，那时候还没翻译出来，翻译的也一般，不过作者是巨牛逼的，听说对css理解的就像自己的左右手，光靠写CSS 他年薪就轻松百万了。。汗颜！思路清晰，图文并茂，还解决一些疑难杂症和高级技巧，类似于JS的语言精粹了，大神级别。 好了，差不多就推荐到这里，CSS这基本是基于情怀，罗列一下，买不买都没必要，想当年我学CSS 是挨着几个仅有的视频，一个属性一个属性的练习，还有IE6 各种兼容问题，虐到爆，那酸爽（现在你们是性福的，基本不用兼容IE6 这个老东西了，）。 真正起到决定作用的，还是JS语言的掌握和实践，JS能力越强 基础越稳固，你的前端能力就会越好， 自然薪资越高，所以现实点说大家，大家一起努力吧，让money 都到碗里来 （有些童鞋认为：从来不需要买纸质书，我全程PDF就行了嘛，不过我建议有些书还是要纸质的，这样有感觉，也可以做笔记，甚至随时当工具书字典来查询，由于前端的特殊性和js语言的属性之繁多庞杂，我建议你还是要买纸质的书。帮助很大，而且我告诉你有了钱要补上正版呃） 那么PDF截图奉上，嘿嘿 如果需要请到此大神网站 网盘下载，应有尽有，此处应该有掌声！ 地址：http://www1.w3cfuns.com/feres.php?do=picture&amp;listtype=book 前端网站大汇总1、前端知识体系：前端知识体系及修炼攻略：http://blog.csdn.net/borishuai/article/details/8676573——对前端知识体系剖析的非常好，尤其是最后对前端的阶段性划分，对前端学习很有指导意义，推荐！前端开发知识结构：https://github.com/JacksonTian/fks——有个前端知识框架的思维导图，给了很多链接和好书，推荐！2、技术资讯类W3Cfuns : http://www.w3cfuns.com/——国内最大的前端站，比较全大前端：http://www.daqianduan.com/——没有W3Cfuns那么杂，有些wodpress的主题，“前端导航”也比较好用W3Cplus:http://www.w3cplus.com/——也是比较全，有个“国外优秀译文”，非常喜欢前端观察 ：http://www.qianduan.net/——专注于前端设计与开发的博客，比较有深度，排版干净，推荐！**前端乱炖 ：http://www.html-js.com/——有点像前端的知乎，有问答平台和专栏啥的3、技术教程、文档类慕课网：http://www.imooc.com/course/program——超级实用的视频教程类网站，各种小实例，非常适合照着“前端学习计划”计划学习codeademy : http://www.codeademy.com/——英文，简单有趣的互动编程学习网站，非常适合入门，中文版是http://www.fenby.com/W3schoo在线教程l: http://www.w3school.com.cn/——中文，适合入门，教程相当全，在线实例可以敲，可惜较浅，有些地方不太准确和深入火狐开发者网络MDN：https://developer.mozilla.org/zh-CN/——中文，不仅有技术文档，而且有相当多的参考资料和资源、工具，推荐！W3C标准：http://www.w3.org/standards/——英文，不解释，官方文档，真前端和伪前端就在于此。可惜英文的，而且可读性差。极不适合入门，适合提高。Web平台文档：http://www.webplatform.org/——英文，权威性仅次于W3C标准，可读性高于W3C标准，W3C官方认可，高质量。 一些不错的网站github：没啥好说的，多阅读别人的源码，多上传自己的源码，向世界各地的大牛学习codepen：感受前端之美的必选之地，里面有很多酷炫的效果和优秀的插件echojs：快速了解js新资讯的网站stackoverflow和segmentfault：基本上各种问题都能在上面获得解答google web fundamentals：每篇文章都适合仔细阅读static files：开放的CDN，很好用iconfont：阿里的矢量图标库，非常不错，支持CDN而且支持项目html5 rocks: 一个不错的网站，很多浏览器的新特性以及前沿的技术，都能在这上面找到文章css tricks：如何活用CSS，以及了解CSS新特性，这里可以满足你JavaScript 秘密花园 JavaScript初学必看，非常不错w3cplus：一个前端学习的网站，里面的文章质量都挺不错的node school：一个不错的node学习网站learn git branch：一个git学习网站，交互很棒前端乱炖：一个前端文章分享的社区，有很多优秀文章正则表达式：一个正则表达式入门教程，非常值得一看各路大牛的博客：这个太多了，就不贴了，知乎上有很全的各种规范的官方网站，不懂得时候读规范]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css常用命名]]></title>
    <url>%2Fname.html</url>
    <content type="text"><![CDATA[class常用命名 页头:header 登录条:loginBar 标志:logo 侧栏:sideBar 广告:banner 导航:nav 子导航:subNav 菜单:menu 子菜单:subMenu 搜索:search 滚动:scroll 页面主体:main 内容:content 标签页:tab 文章列表:list 提示信息:msg 小技巧:tips 栏目标题:title 友情链接:friendLink 页脚:footer 加入:joinus 指南:guild 服务:service 热点:hot 新闻:news 下载:download 注册:regsiter 状态:status 按钮:btn 投票:vote 合作伙伴:partner 版权:copyRight CSSID的命名 外套:wrap 主导航:mainNav 子导航:subnav 页脚:footer 整个页面:content 页眉:header 页脚:footer 商标:label 标题:title 主导航:mainNav(globalNav) 顶导航:topnav 边导航:sidebar 左导航:leftsideBar 右导航:rightsideBar 旗志:logo 标语:banner 菜单内容1:menu1Content 菜单容量:menuContainer 子菜单:submenu 边导航图标:sidebarIcon 注释:note 面包屑:breadCrumb(即页面所处位置导航提示) 容器:container 内容:content 搜索:search 登陆:login 功能区:shop(如购物车，收银台) 当前的current 样式文件命名 主要的:master.css 布局版面:layout.css 专栏:columns.css 文字:font.css 打印样式:print.css 主题:themes.css]]></content>
      <categories>
        <category>class命名</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
